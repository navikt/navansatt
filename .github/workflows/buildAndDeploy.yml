name: Build and deploy main branch

on:
  push:
    branches:
      - main

jobs:
  build:
    permissions:
      packages: write
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    outputs:
      image: "${{ steps.build_push.outputs.image }}"
      telemetry: "${{ steps.build_push.outputs.telemetry }}"
    steps:
      - uses: actions/checkout@v5
      - uses: actions/cache@v4
        with:
          path: ~/.m2
          key: "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set version
        id: version
        shell: bash
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=12 HEAD)
          echo "TIME=$TIME" >> $GITHUB_OUTPUT
          echo "VERSION=$TIME-$COMMIT" >> $GITHUB_OUTPUT

      - name: NAIS login
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: nais/login@v0
        id: login
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: teampensjon

      - name: Build jar with Maven
        run: mvn clean package -DskipTests

      - name: Build and push
        if: ${{ github.actor != 'dependabot[bot]' }}
        id: build_push
        uses: nais/docker-build-push@v0
        with:
          team: teampensjon

  deploy:
    permissions:
      contents: "read"
      id-token: "write"
    if: github.ref == 'refs/heads/main'
    needs: [ build ]
    runs-on: 'ubuntu-latest'

    strategy:
      matrix:
        include:
          - name: navansatt
            cluster: dev-fss
            resource: nais/nais-dev.yaml

          - name: navansatt
            cluster: prod-fss
            resource: nais/nais-prod.yaml

    steps:
      - uses: actions/checkout@v5
      - uses: nais/deploy/actions/deploy@v2
        name: 'Deploy to NAIS'
        env:
          IMAGE: "${{ needs.build.outputs.image }}"
          RESOURCE: ${{matrix.resource}}
          CLUSTER: ${{matrix.cluster}}
          TELEMETRY: ${{ needs.build.outputs.telemetry }}